// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Common.cginc"

RWStructuredBuffer<Point> _PointBuffer;
bool _MouseActive;
float4x4 _CamMatrix;
float3 _MousePosition;
float _MouseRadius;
float _ClosestPointRadius;
float3 _ClosestPoint;
int _LayerIndex;

[numthreads(32,32,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Point input = _PointBuffer[id.x * 32 + id.y];
    const float3 pos = input.position;

    /* For 2d cylinder  */
    float3 local_pos = mul(_CamMatrix, float4(pos, 1)).xyz;
    local_pos -= _MousePosition;
    float combinedDistance = pow(local_pos.x, 2) + pow(local_pos.y, 2);

    /* For limited depth cylinder */
    float closestPointDistance = distance(_ClosestPoint, pos);


    half4 c = PcxDecodeColorAndLayer(input.color);

    // makes layer 0 not selectable without another if statement
    half layer = c.w;
    // combinedDistance += (1000 * (1 - clamp(abs(layer - 2), 0, 1)));

    // if the point is within the radius of a hand 
    if (combinedDistance < _MouseRadius * _MouseRadius * _MouseActive &&
        closestPointDistance < _ClosestPointRadius && layer <= 1)
    {
        c.w = _LayerIndex;
    }

    input.color = PcxEncodeColorAndLayer(c);
    _PointBuffer[id.x * 32 + id.y].color = input.color;
}

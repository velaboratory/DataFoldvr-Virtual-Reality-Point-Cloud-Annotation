// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include <HLSLSupport.cginc>

#include "Common.cginc"

RWStructuredBuffer<Point> _PointBuffer;
AppendStructuredBuffer<Point> _OutputBuffer;
float subsampleFactor;
float4x4 cameraMatrix;
float3 cameraPosition;
float3 cameraDirection;

bool mouseActive;
float2 mousePosition;
float mouseRadius;

bool leftHandActive;
bool rightHandActive;
float handRadius;
float3 leftHandPosition;
float3 rightHandPosition;
int visibleLayersBitmask = ~0;

float random3(float3 pos)
{
    return frac(sin(dot(pos, float3(12.9898, 78.233, 213.3499))) * 43758.5453123);
}

inline float3 applyHue(float3 aColor, float aHue)
{
    float angle = radians(aHue);
    float3 k = float3(0.57735, 0.57735, 0.57735);
    float cosAngle = cos(angle);
    //Rodrigues' rotation formula
    return aColor * cosAngle + cross(k, aColor) * sin(angle) + k * dot(k, aColor) * (1 - cosAngle);
}


inline float4 applyHSBEffect(float4 startColor, fixed4 hsbc)
{
    float _Hue = 360 * hsbc.r;
    float _Brightness = hsbc.g * 2 - 1;
    float _Contrast = hsbc.b * 2;
    float _Saturation = hsbc.a * 2;

    float4 outputColor = startColor;
    outputColor.rgb = applyHue(outputColor.rgb, _Hue);
    outputColor.rgb = (outputColor.rgb - 0.5f) * (_Contrast) + 0.5f;
    outputColor.rgb = outputColor.rgb + _Brightness;
    float3 intensity = dot(outputColor.rgb, float3(0.299, 0.587, 0.114));
    outputColor.rgb = lerp(intensity, outputColor.rgb, _Saturation);

    return outputColor;
}


[numthreads(32,32,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Point input = _PointBuffer[id.x * 32 + id.y];
    const float3 pos = input.position;
    const float3 localPos = mul(cameraMatrix, float4(pos, 1)).xyz;
    float prob = random3(pos);
    float leftHandProb = leftHandActive * (1 - clamp(distance(leftHandPosition, pos) / handRadius, 0, 1));
    float rightHandProb = rightHandActive * (1 - clamp(distance(rightHandPosition, pos) / handRadius, 0, 1));
    float mouseProb = mouseActive * (1 - clamp(distance(mousePosition, localPos.xy) / mouseRadius, 0, 1));
    float camerasPosProb = 1 - clamp(distance(cameraPosition, pos) * .01, 0, 1);
    float3 from = float3(0, 0, 1);
    float3 to = localPos;
    float num = sqrt(length(from) * length(from) * length(to) * length(to));
    float angle = num < 1.00000000362749E-15 ? 0.0f : acos(clamp(dot(from, to) / num, -1, 1)) * 57.29578;
    float cameraAngleProb = clamp(angle * 15, 0, .5);

    // add the probabilities together to get the final prob of showing the point
    prob = clamp(prob + leftHandProb + rightHandProb + mouseProb, 0, 1);
    // prob = clamp(mouseProb, 0, 1);

    // change color for debug
    half4 color = PcxDecodeColorAndLayer(input.color);
    // color.r = clamp(255 - angle*15, 0, 255);
    // color.g *= .5;
    // color.b *= .5;

    // multiplies the probability by 1 if it's on a visible layer, 0 if on a hidden layer
    const int layer = color.a;
    prob *= (visibleLayersBitmask & (1 << layer)) >> layer;
    input.color = PcxEncodeColorAndLayer(color);

    if (prob > 1 - subsampleFactor)
    {
        _OutputBuffer.Append(input);
    }
}

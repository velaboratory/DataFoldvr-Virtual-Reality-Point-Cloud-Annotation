// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Common.cginc"


struct HalfPoint
{
    float3 position;
    float distance;
};

RWStructuredBuffer<Point> _PointBuffer;
bool _MouseActive;
float4x4 _CamMatrix;
float3 _MousePosition;
float _MouseRadius;
AppendStructuredBuffer<HalfPoint> _OutputBuffer;

[numthreads(32,32,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    Point input = _PointBuffer[id.x * 32 + id.y];
    const float3 pos = input.position;

    float3 local_pos = mul(_CamMatrix, float4(pos, 1)).xyz;
    local_pos -= _MousePosition;

    float combinedDistance = pow(local_pos.x, 2) + pow(local_pos.y, 2);


    half4 c = PcxDecodeColorAndLayer(input.color);

    // makes layer 0 not selectable without another if statement
    half layer = c.w;
    combinedDistance += (1000 * (1 - clamp(abs(layer - 2), 0, 1)));

    // if the point is within the radius of a hand 
    if (combinedDistance < _MouseRadius * _MouseRadius * _MouseActive / 20)
    {
        HalfPoint half_point;
        half_point.position = input.position;
        half_point.distance = local_pos.z;
        _OutputBuffer.Append(half_point);
    }
}
